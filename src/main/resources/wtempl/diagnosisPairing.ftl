<#import "utilMacro.ftl" as um>
<#import "descriptionMacro.ftl" as dm>

<@um.pageHeader/>

<@um.printMenu/>
	

<@um.pageContent>

	<!--[if lt IE 9]><script src="http://cdnjs.cloudflare.com/ajax/libs/es5-shim/2.0.8/es5-shim.min.js"></script><![endif]-->
	
	<div class="main">
	  <div class="navigation-c4j">
	  	<div class="linkButtonBack-c4j"><a href="patientData_1_specifyCSV">Upload new Patient Data file</a></div>&nbsp;
	  	<div class="linkButtonBack-c4j"><a href="visitData_1_specifyCSV">Upload new Visit Data file</a></div>&nbsp;
	  	<div class="linkButtonBack-c4j"><a href="diagnosisData_1_specifyCSV">Upload new Diagnosis Data file</a></div>&nbsp;
	  	<div class="linkButtonBack-c4j"><a href="descrDiagnosisData_1_specifyCSV">Upload new Diagnosis Description Data file</a></div>&nbsp;
	  	<div class="linkButtonBack-c4j"><a href="diagnosisGrouping">Define new diagnosis groups</a></div>&nbsp;
	  </div>
	  
	  <div class="navigation-c4j">
	  	<h2>6) Define diagnoses pairs to study</h2>
	  </div>
	  
	  <div class="navigation-c4j">
	  	<span id="diagnosisPairignSkipButton" class="linkButtonBack-c4j" style="color:red; background-color:white;">
	  	OPTIONAL STEP: click here to skip this step and proceed with data loading.</span>&nbsp;
	  </div>
	  
	  <@dm.diagnosisPairingDescription/>
	  
	  <#if md.errorMessage??>
		  <@um.errorDiv>
		  ${md.errorMessage}
		  </@um.errorDiv>
	  </#if>
	  
	  
	  <!-- DIAGNOSIS PAIRING SELECTION - START -->
	  <!-- Selectize.js - https://github.com/selectize/selectize.js -->
	  <link href="${md.baseCSS_JSpath!''}css/selectize.css?v=${md.CSSJScount!'---'}" rel="stylesheet">
	  <script type="text/javascript" src="${md.baseCSS_JSpath!''}js/selectize.min.js?v=${md.CSSJScount!'---'}"></script>
	  
	  <div id="regExpInfoExampleD_cont" class="contentExpanderForm" style="display: none;"> 
			Examples of regular expressions to search for all diagnoses matching them in code or description:
			<ul>
				<li><b>Match string begin</b>:&nbsp; <i>$</i></li>
				<li><b>Match string end</b>:&nbsp; <i>^</i></li>
				<li><b>Case insensitive</b>:&nbsp;start the regular expression with <i>i/</i></li>
			</ul>
			For instance:
			<ul>
				<li><b>i/$Disease of</b>&nbsp; is a case insensitive match of all the strings that starts with 'Disease of'</li>
				<li><b>.*disease.*</b>&nbsp; is a case sensitive match of all the strings that include the word 'diseases'</li>
			</ul>
	  </div>
	  
	  <div id="dialog" title="Basic dialog">
	  		<b>Total diagnosis pairs generated by current pairing pattern<b>:&nbsp;<span id="totPairsPatter">0</span><br/>
  			<b>Each diagnosis belonging to the following group<b>:<br/>
			<div id="selectedSel_S" style="padding: 10px; background-color: #DDD; border: 1px black solid;" class="diagSelectorGroup-c4j" style="background-color:white;margin-top: 10px;">
				<b>Currently <span id="diagnCount_S">0</span> diagnosis over <span id="diagnTotal_S">0</span> diagnses available are included in the group</b>:&nbsp;
				<div id="selectedSelDiv" style="margin-top: 5px;">
				<select id="selected-to_S" placeholder="No diagnosis selected."></select>
				</div>
				<input id="iteractiveAddDiagnsesToSelected_S" type="button" value="Add diagnoses to the group"/>&nbsp;
				<input id="iteractiveClearAllSelected_S" type="button" value="Remove all diagnoses"/>&nbsp;
			</div>
			<b>will be paired with</b>:&nbsp;
			<select id="selectedSelOption_D">
			  <option value="allDiagnoses" selected>all the diagnoses of the dataset</option>
			  <option value="allGroupDiagnoses">all the diagnoses belonging to the following group:</option>
			</select>
			<div id="selectedSel_container_D">
			
				<div id="selectedSel_D" style="padding: 10px; background-color: #DDD; border: 1px black solid;" class="diagSelectorGroup-c4j" style="background-color:white;margin-top: 10px;">
					<b>Currently <span id="diagnCount_D">0</span> diagnosis over <span id="diagnTotal_D">0</span> diagnses available are included in the group</b>:&nbsp;
					<div id="selectedSelDiv" style="margin-top: 5px;">
					<select id="selected-to_D" placeholder="No diagnosis selected."></select>
					</div>
					<input id="iteractiveAddDiagnsesToSelected_D" type="button" value="Add diagnoses to the group"/>&nbsp;
					<input id="iteractiveClearAllSelected_D" type="button" value="Remove all diagnoses"/>&nbsp;
				</div>
			
			</div>
			
				
	  </div>
	  
	  <div id="selectionDialog" title="Diagnosis selection">
  			Please, specify a group of diagnoses.<br/>
  			
  			<div id="selectedSel" class="diagSelectorGroup-c4j" style="background-color:white;margin-top: 10px;">
				<b>You have currently selected <span id="diagnCount">0</span> diagnosis over <span id="diagnTotal">0</span> diagnoses available</b>:&nbsp;
				<div id="selectedSelDiv" style="margin-top: 5px;">
				<select id="selected-to" placeholder="Type here the diagnosis code or description..."></select>
				</div>
				<input id="iteractiveClearAllSelected" type="button" value="Remove all diagnoses"/>&nbsp;
			</div>
			
			
  			<div id="selectorDG" style="background-color:#DEEAEE; padding:5px; border:1px black solid;">
	  			Add one or more diagnoses to your selection by relying on the following three approaches:<br/>
	  			<div id="codeRegexpSel" class="diagSelectorGroup-c4j">
	  				<div id="regExpInfoExampleD" style="display: inline; cursor: pointer;">
						<img src="img/info.png" width="16" height="16" />
					</div>
	  				<b>&nbsp;all the diagnosis with code matching the following regexp</b>&nbsp; <input id="codeRegexp" type="text"/>&nbsp;
	  				<input id="codeRegexpCb" type="button" value="Add!"/>&nbsp;
	  			</div>
	  			<div id="descrRegexpSel" class="diagSelectorGroup-c4j">
	  				<div id="regExpInfoExampleD1" style="display: inline; cursor: pointer;">
						<img src="img/info.png" width="16" height="16" />
					</div>
	  				<b>&nbsp;all the diagnosis with description matching the following regexp</b>&nbsp; <input id="descrRegexp" type="text"/>&nbsp;
	  				<input id="descrRegexpCb" type="button" value="Add!"/>&nbsp;
	  			</div>
	  			<!--
		  		<div id="interactiveSel" class="diagSelectorGroup-c4j">
					<b>- all the diagnosis belongining to the following search and suggest list</b>&nbsp;
					<div id="interactiveSelDiv">
					<select id="select-to" placeholder="Pick some diagnosis..."></select>
					</div>
					<input id="iteractiveClearSelection" type="button" value="Clear list"/>&nbsp;
					<input id="interactiveCb" type="button" value="Add!"/>&nbsp;
				</div>
				-->
			</div>
	
	  </div>
	  
	  
	  <div id="infoDialog" title="">
	  </div>
	  
	  <script type="text/javascript">
	   var diagnosisGroupsCount = 0
	   var diagnosisGroups = {} // Group name as key and list of all group diagnoses as value (or __ALL_DIAGNOSES_SELECTED__)
	   var groupPairs = {} // Source (key) and destination (value) group pair
	   
	   var totPairsGlobalCount = 0;
	   var totPairsGlobal = {};
	   
	   var diagnosisList = ${md.diagnosisList!'[]'};
				
	   var diagnosisListIndex = ${md.diagnosisListIndex!'[]'};
	  
	   // var selectRef = null;
	   var selectedRef = null;
	   var selectedRef_S = null;
	   var selectedRef_D = null;
	   var selectedRef_CURRENT = null;
	   
	   var infoDialogRef = null;
	   
	   $(document).ready(function() {
	   	
	   		$("#diagnTotal").html(diagnosisList.length);
	   		$("#diagnTotal_S").html(diagnosisList.length);
	   		$("#diagnTotal_D").html(diagnosisList.length);
	   		$("#totalDiagnoses").html(diagnosisList.length);
	   		
	   		var allDiagnosisCodeList = [];
	   		var allPairsGlobalCount = 0;
	   		for (var i = 0; i < diagnosisList.length; i++)
    			for (var j = i + 1; j < diagnosisList.length; j++)
        			allPairsGlobalCount++;
	   		$("#maxTotalDiagnosisPairs").html(Math.round(allPairsGlobalCount) + "");
	   		
	   		
	   		$("#addPair").click(function() {
			  	$("#dialog").dialog("open");
			  	var w = window.innerWidth;
				var h = window.innerHeight;
			  	$("#dialog").dialog("option", "width", ((w > 100) ? w - 50 : w - 1));
			  	$("#dialog").dialog("option", "height", ((h > 100) ? h - 50 : h - 1));
			});
	   		
	   		$("#dialog").dialog({
		      resizable: true,
	      	  autoOpen: false,
		      height: "auto",
		      width: "auto",
		      modal: true,
		      title: "Selection of a diagnosis pairing pattern",
		      buttons: {
		        "Create diagnosis pairing pattern": function() {
		        	
		        	var itemsSelected_S = selectedRef_S[0].selectize.getValue();
		        	var itemsSelected_D = selectedRef_D[0].selectize.getValue();
		        	
		        	var currentValue = $("#selectedSelOption_D").val(); // allDiagnoses, allGroupDiagnoses
		        	
		        	if(itemsSelected_S.length == 0 || (itemsSelected_D.length == 0 && currentValue != "allDiagnoses")) {
						$("#alertDialog").html("One or both sets of diagnoses are empty. Please, select at least one diagnoses for each set.");
				    	$("#alertDialog").dialog("open");
				    	return;
					}
		        	
		        	// Create group S
		        	diagnosisGroupsCount = diagnosisGroupsCount + 1;
		        	diagnosisGroupsCount_S = diagnosisGroupsCount;
		        	diagnosisGroups["group_" + diagnosisGroupsCount_S] = [];
		        	for (var i = 0; i < itemsSelected_S.length; i++) {
		        		diagnosisGroups["group_" + diagnosisGroupsCount_S].push(itemsSelected_S[i]);
		        	}
		        	
		        	// Create group D
		        	diagnosisGroupsCount = diagnosisGroupsCount + 1;
			        diagnosisGroupsCount_D = diagnosisGroupsCount;
			        diagnosisGroups["group_" + diagnosisGroupsCount_D] = [];
			        
			        var currentValue = $("#selectedSelOption_D").val(); // allDiagnoses, allGroupDiagnoses
			 	 
				 	if(currentValue == "allDiagnoses") {
				 		diagnosisGroups["group_" + diagnosisGroupsCount_D].push("__ALL_DIAGNOSES_SELECTED__");
				 	}
				 	else {
				 		for (var i = 0; i < itemsSelected_D.length; i++) {
		        			diagnosisGroups["group_" + diagnosisGroupsCount_D].push(itemsSelected_D[i]);
		        		}
				 	}
			        
			        // Create group pair
			        groupPairs["group_" + diagnosisGroupsCount_S] = "group_" + diagnosisGroupsCount_D;
			        			        
			        
			        $("#diagPairsDefinedCount").html(Object.keys(groupPairs).length);
			        
			        // Update table
			        $("#pairingList").html("");
			        
			        var pairingPatternsCount = 0;
			        totPairsGlobal = {};
			        totPairsGlobalCount = 0;
			        for(var key in groupPairs) {
					    if(groupPairs.hasOwnProperty(key)) {
					        // console.log(key + " -> " + groupPairs[key]);
					        var sourceG = key;
					        var destinationG = groupPairs[key];
					        
					        pairingPatternsCount = pairingPatternsCount + 1;
					        var coreHTML = "<div id='DIVALL_" + sourceG + "' style='border: 1px black solid; padding:3px; margin: 3px; background-color: white; width: 100%;'>" + 
					        	pairingPatternsCount + ")&nbsp;<span style='font-weight: bold;'>PAIRING PATTERN: '" + sourceG + " - " + destinationG + "'</span><br/></div>";
					        var coreHTMLel = $(coreHTML);
					        
					        // Source Group html
					        var stringDiagList_S = "";
					        for(var i = 0; i < diagnosisGroups[sourceG].length; i++) {
					        	stringDiagList_S = stringDiagList_S + ((stringDiagList_S.length > 0) ? ", " : "") + diagnosisGroups[sourceG][i];
					        	if(stringDiagList_S.length > 100) {
					        		stringDiagList_S = stringDiagList_S + "...";
					        		break;
					        	}
					        }
					        
					        var groupListHTML_S = "<div id='DIV_" + sourceG + "' style='margin: 15px; padding: 5px; border: 1px black solid; background-color: #FFF7AA;'>" + 
					        	"<b>Group name</b>&nbsp;<i>" + sourceG + "</i>&nbsp;<b> containing " + diagnosisGroups[sourceG].length + " diagnoses</b>:&nbsp;" + 
					        	stringDiagList_S + "</div>";
					        var groupListHTMLel_S = $(groupListHTML_S);
					        
					        var showDiagnosesHTML_S = "<br/><div class='buttonDiv-c4j' data-gname='" + sourceG + "' >Show list of diagnoses</div>";;
					        var showDiagnosesHTMLel_S = $(showDiagnosesHTML_S);
					        
					        groupListHTMLel_S.append(showDiagnosesHTMLel_S);
					        
					        showDiagnosesHTMLel_S.click(function(e){
								$("#alertDialog").html("");
								
								var gName = $(e.currentTarget).data('gname');
   								
   								var fullListHTML = "<div>List of diagnoses of group with name <i>" + gName + "</i>: <ul>";
   								for(var i = 0; i < diagnosisGroups[gName].length; i++) {
   									var descr = "<b>" + diagnosisGroups[gName][i] + "</b>";
   									if(diagnosisListIndex.hasOwnProperty(diagnosisGroups[gName][i])) {
   										descr = descr + ":&nbsp;" + diagnosisListIndex[diagnosisGroups[gName][i]];
   									}
   									
   									fullListHTML = fullListHTML + "<li>" + descr + "</li>";
   								}
   								fullListHTML = fullListHTML + "</ul></div>";
   								
					        	var fullListHTMLel = $(fullListHTML);
					        	
   								$("#alertDialog").html(fullListHTMLel);
			    				$("#alertDialog").dialog("open");
							});
							
							
							// Destination Group html
					        var stringDiagList_D = "";
					        for(var i = 0; i < diagnosisGroups[destinationG].length; i++) {
					        	stringDiagList_D = stringDiagList_D + ((stringDiagList_D.length > 0) ? ", " : "") + diagnosisGroups[destinationG][i];
					        	if(stringDiagList_D.length > 100) {
					        		stringDiagList_D = stringDiagList_D + "...";
					        		break;
					        	}
					        }
					        
					        var groupListHTML_D = "<div id='DIV_" + destinationG + "' style='margin: 15px; padding: 5px; border: 1px black solid; background-color: #FFF7AA;'>" + 
					        	"<b>Group name</b>&nbsp;<i>" + destinationG + "</i>&nbsp;<b> containing " + diagnosisGroups[destinationG].length + " diagnoses</b>:&nbsp;" + 
					        	stringDiagList_D + "</div>";
					        var groupListHTMLel_D = $(groupListHTML_D);
					        
					        var showDiagnosesHTML_D = "<br/><div class='buttonDiv-c4j' data-gname='" + destinationG + "' >Show list of diagnoses</div>";;
					        var showDiagnosesHTMLel_D = $(showDiagnosesHTML_D);
					        
					        groupListHTMLel_D.append(showDiagnosesHTMLel_D);
					        
					        showDiagnosesHTMLel_D.click(function(e){
								$("#alertDialog").html("");
								
								var gName = $(e.currentTarget).data('gname');
   								
   								var fullListHTML = "<div>List of diagnoses of group with name <i>" + gName + "</i>: <ul>";
   								for(var i = 0; i < diagnosisGroups[gName].length; i++) {
   									var descr = "<b>" + diagnosisGroups[gName][i] + "</b>";
   									if(diagnosisListIndex.hasOwnProperty(diagnosisGroups[gName][i])) {
   										descr = descr + ":&nbsp;" + diagnosisListIndex[diagnosisGroups[gName][i]];
   									}
   									
   									fullListHTML = fullListHTML + "<li>" + descr + "</li>";
   								}
   								fullListHTML = fullListHTML + "</ul></div>";
   								
					        	var fullListHTMLel = $(fullListHTML);
					        	
   								$("#alertDialog").html(fullListHTMLel);
			    				$("#alertDialog").dialog("open");
							});
							
							// Compute total pairs
						    var selectedRef_pairs_S = diagnosisGroups[sourceG];
						    var selectedRef_pairs_D = diagnosisGroups[destinationG];
						    			 	 
						 	if(diagnosisGroups[destinationG].indexOf("__ALL_DIAGNOSES_SELECTED__") > -1) {
						 		selectedRef_pairs_D = [];
						 		for(var i = 0; i < diagnosisList.length; i++) {
						        	selectedRef_pairs_D.push(diagnosisList[i].code);
					        	}
						 	}
						    
						    var totPairsLocal = computePairs(selectedRef_pairs_S, selectedRef_pairs_D);
						    // Add to totPairsGlobal 
						    Object.keys(totPairsLocal).forEach(function(group_S) {
							    // console.log(group_S, totPairsLocal[group_S]);
							    var code_S = group_S;
								
								for(let code_D of totPairsLocal[code_S]) {
								  	if(code_D != code_S) {
							    		if(!(code_S in totPairsGlobal)) totPairsGlobal[code_S] = new Set();
							    		totPairsGlobal[code_S].add(code_D);
							    		
							    		if(!(code_D in totPairsGlobal)) totPairsGlobal[code_D] = new Set();
							    		totPairsGlobal[code_D].add(code_S);
							    	}
								}
							});
							
							coreHTMLel.append($("<div>Each diagnosis of the following group:</div>"));
							coreHTMLel.append(groupListHTMLel_S);
							coreHTMLel.append($("<div>will be paired with all the diagnoses of the following group:</div>"));
							coreHTMLel.append(groupListHTMLel_D);
							var computeLengthTotPairsLocal = computeLength(totPairsLocal);
							coreHTMLel.append($("<div>generating a total of " + Math.round(computeLengthTotPairsLocal / 2) + " diagnosis pairs.</div>"));
							
							var deleteHTML = "<span style='display:block; margin-right: 5px; color:red; cursor: pointer;' data-sgname='" + sourceG + "' >Delete diagnosis pairing pattern</span>";
					        var deleteHTMLel = $(deleteHTML);
					        coreHTMLel.append(deleteHTMLel);
					        
							deleteHTMLel.click(function(e){
								var sgName = $(e.currentTarget).data('sgname');
					        	var destinationG = groupPairs[sgName];
								
								delete diagnosisGroups[sgName];
								delete diagnosisGroups[destinationG];
								
								delete groupPairs[sgName];
								
								totPairsGlobal = {};
			       				totPairsGlobalCount = 0;
								for(var sgNameInt in groupPairs) {
					    			if(groupPairs.hasOwnProperty(sgNameInt)) {
					    				var selectedRef_pairs_S = diagnosisGroups[sgNameInt];
									    var selectedRef_pairs_D = diagnosisGroups[groupPairs[sgNameInt]];
									    
									    if(diagnosisGroups[groupPairs[sgNameInt]].indexOf("__ALL_DIAGNOSES_SELECTED__") > -1) {
									 		selectedRef_pairs_D = [];
									 		for(var i = 0; i < diagnosisList.length; i++) {
									        	selectedRef_pairs_D.push(diagnosisList[i].code);
								        	}
									 	}
									    
									    var totPairsLocal = computePairs(selectedRef_pairs_S, selectedRef_pairs_D);
										// Add to totPairsGlobal 
									    Object.keys(totPairsLocal).forEach(function(group_S) {
										    // console.log(group_S, totPairsLocal[group_S]);
										    var code_S = group_S;
										    
										    for(let code_D of totPairsLocal[code_S]) {
											  	if(code_D != code_S) {
										    		if(!(code_S in totPairsGlobal)) totPairsGlobal[code_S] = new Set();
										    		totPairsGlobal[code_S].add(code_D);
										    		
										    		if(!(code_D in totPairsGlobal)) totPairsGlobal[code_D] = new Set();
										    		totPairsGlobal[code_D].add(code_S);
										    	}
											}
											
										});
					    			}
					    		}
								
								totPairsGlobalCount = computeLength(totPairsGlobal);
								if(totPairsGlobalCount == 0) {
						        	$("#totalDiagnosisPairs").html("ALL");
						        }
						        else {
						        	$("#totalDiagnosisPairs").html(Math.round(totPairsGlobalCount / 2) + "");
						        }
   								
							 	$("#diagPairsDefinedCount").html(Object.keys(groupPairs).length);
							 	$("#DIVALL_" + sgName).remove();
							 	
							 	updateUploadPairs();
							});
							
							
							$("#pairingList").append(coreHTMLel);
					        
					    }
					}
			        
			        totPairsGlobalCount = computeLength(totPairsGlobal);
			        if(totPairsGlobalCount == 0) {
			        	$("#totalDiagnosisPairs").html("ALL");
			        }
			        else {
			        	$("#totalDiagnosisPairs").html(Math.round(totPairsGlobalCount / 2) + "");
			        }
			        
			        selectedRef_S[0].selectize.clear(true);
			        selectedRef_D[0].selectize.clear(true);
			        
			        $("#diagnCount_S").html("0");
			        $("#diagnCount_D").html("0");
			        $("#totPairsPatter").html("0");
			        
			        $('#selectedSelOption_D').val('allDiagnoses').change();
			        $("#selectedSel_container_D").hide();
			        
			        updateUploadPairs();
		        	$(this).dialog("close");
		        },
		        Cancel: function() {
		        	
		        	selectedRef_S[0].selectize.clear(true);
			        selectedRef_D[0].selectize.clear(true);
		        	
		        	$("#diagnCount_S").html("0");
			        $("#diagnCount_D").html("0");
			        $("#totPairsPatter").html("0");
			        
			        $('#selectedSelOption_D').val('allDiagnoses').change();
			        $("#selectedSel_container_D").hide();
		        	
		        	updateUploadPairs();
		          	$(this).dialog("close");
		        }
		      }
		    });
		    
		    
		    selectedRef_S = $('#selected-to_S').selectize({
				persist: false,
				openOnFocus: false,
				maxItems: null,
				maxOptions: 0,
				valueField: 'code',
				labelField: 'description',
				searchField: ['code', 'description'],
				sortField: [
					{field: 'description', direction: 'asc'},
					{field: 'code', direction: 'asc'}
				],
				options: diagnosisList,
				onItemAdd: function(name) { 
					$("#diagnCount_S").html(selectedRef_S[0].selectize.getValue().length);
				},
				onItemRemove: function(name) { 
					$("#diagnCount_S").html(selectedRef_S[0].selectize.getValue().length);
					
					// Add / remove options
				  	for(var i = 0; i < diagnosisList.length; i++) {
		        		// selectRef[0].selectize.addOption(diagnosisList[i], true);
			        	selectedRef[0].selectize.addOption(diagnosisList[i], true);
		        	}
				  	
				  	for(var k = 0; k < selectedRef_S[0].selectize.getValue().length; k++) {
				  		var itemToRemove = selectedRef_S[0].selectize.getValue()[k];
				  		// selectRef[0].selectize.removeOption(itemToRemove, true);
						selectedRef[0].selectize.removeOption(itemToRemove, true);
				  	}
				  	
				  	// selectRef[0].selectize.refreshItems();
					selectedRef[0].selectize.refreshItems();
				},
				onType: function(name) { 
					$("#iteractiveAddDiagnsesToSelected_S").click();
				},
				render: {
					item: function(item, escape) {
						return '<div>' +
							(item.description ? '<span class="description" style="font-weight: bold;">' + escape((item.description.length > 20) ? item.description.substring(0, 19) + "..." : item.description) + '</span>' : '') + '&nbsp;' +
							(item.code ? '<span class="code">(\'' + escape(item.code) + '\')</span>' : '') +
						'</div>';
					},
					option: function(item, escape) {
						return '<div>' +
							(item.description ? '<span class="description" style="font-weight: bold;">' + escape((item.description.length > 20) ? item.description.substring(0, 19) + "..." : item.description) + '</span>' : '') + '&nbsp;' +
							(item.code ? '<span class="code">(\'' + escape(item.code) + '\')</span>' : '') +
						'</div>';
					}
				}
			});
			
			selectedRef_D = $('#selected-to_D').selectize({
				persist: false,
				openOnFocus: false,
				maxItems: null,
				maxOptions: 0,
				valueField: 'code',
				labelField: 'description',
				searchField: ['code', 'description'],
				sortField: [
					{field: 'description', direction: 'asc'},
					{field: 'code', direction: 'asc'}
				],
				options: diagnosisList,
				onItemAdd: function(name) { 
					$("#diagnCount_D").html(selectedRef_D[0].selectize.getValue().length);
				},
				onItemRemove: function(name) { 
					$("#diagnCount_D").html(selectedRef_D[0].selectize.getValue().length);
					
					// Add / remove options
				  	for(var i = 0; i < diagnosisList.length; i++) {
		        		// selectRef[0].selectize.addOption(diagnosisList[i], true);
			        	selectedRef[0].selectize.addOption(diagnosisList[i], true);
		        	}
				  	
				  	for(var k = 0; k < selectedRef_D[0].selectize.getValue().length; k++) {
				  		var itemToRemove = selectedRef_D[0].selectize.getValue()[k];
				  		// selectRef[0].selectize.removeOption(itemToRemove, true);
						selectedRef[0].selectize.removeOption(itemToRemove, true);
				  	}
				  	
				  	// selectRef[0].selectize.refreshItems();
					selectedRef[0].selectize.refreshItems();
				},
				onType: function(name) { 
					$("#iteractiveAddDiagnsesToSelected_D").click();
				},
				render: {
					item: function(item, escape) {
						return '<div>' +
							(item.description ? '<span class="description" style="font-weight: bold;">' + escape((item.description.length > 20) ? item.description.substring(0, 19) + "..." : item.description) + '</span>' : '') + '&nbsp;' +
							(item.code ? '<span class="code">(\'' + escape(item.code) + '\')</span>' : '') +
						'</div>';
					},
					option: function(item, escape) {
						return '<div>' +
							(item.description ? '<span class="description" style="font-weight: bold;">' + escape((item.description.length > 20) ? item.description.substring(0, 19) + "..." : item.description) + '</span>' : '') + '&nbsp;' +
							(item.code ? '<span class="code">(\'' + escape(item.code) + '\')</span>' : '') +
						'</div>';
					}
				}
			});
			
			$("#iteractiveAddDiagnsesToSelected_S").click(function() {
			  	// Add / remove options
			  	for(var i = 0; i < diagnosisList.length; i++) {
	        		// selectRef[0].selectize.addOption(diagnosisList[i], true);
		        	selectedRef[0].selectize.addOption(diagnosisList[i], true);
	        	}
			  	
			  	for(var k = 0; k < selectedRef_S[0].selectize.getValue().length; k++) {
			  		var itemToRemove = selectedRef_S[0].selectize.getValue()[k];
			  		// selectRef[0].selectize.removeOption(itemToRemove, true);
					selectedRef[0].selectize.removeOption(itemToRemove, true);
			  	}
			  	
			  	// selectRef[0].selectize.refreshItems();
				selectedRef[0].selectize.refreshItems();
			  	
			  	$("#diagnTotal").html(Object.keys(selectedRef[0].selectize.options).length);
			  	
			  	// Open dialog
			  	$("#selectionDialog").dialog("open");
		    	var w = window.innerWidth;
				var h = window.innerHeight;
			  	$("#selectionDialog").dialog("option", "width", ((w > 200) ? w - 100 : w - 1));
			  	$("#selectionDialog").dialog("option", "height", ((h > 100) ? h - 100 : h - 1));
			  	
			  	// Set callback function
			  	selectedRef_CURRENT = selectedRef_S;
		    });
		    
		    
		    $("#iteractiveAddDiagnsesToSelected_D").click(function() {
		    	// Add / remove options
			  	for(var i = 0; i < diagnosisList.length; i++) {
	        		// selectRef[0].selectize.addOption(diagnosisList[i], true);
		        	selectedRef[0].selectize.addOption(diagnosisList[i], true);
	        	}
			  	
			  	for(var k = 0; k < selectedRef_D[0].selectize.getValue().length; k++) {
			  		var itemToRemove = selectedRef_D[0].selectize.getValue()[k];
			  		// selectRef[0].selectize.removeOption(itemToRemove, true);
					selectedRef[0].selectize.removeOption(itemToRemove, true);
			  	}
			  	
			  	// selectRef[0].selectize.refreshItems();
				selectedRef[0].selectize.refreshItems();
			  	
			  	
			  	$("#diagnTotal").html(Object.keys(selectedRef[0].selectize.options).length);
			  	
			  	// Open dialog
		    	$("#selectionDialog").dialog("open");
		    	var w = window.innerWidth;
				var h = window.innerHeight;
			  	$("#selectionDialog").dialog("option", "width", ((w > 200) ? w - 100 : w - 1));
			  	$("#selectionDialog").dialog("option", "height", ((h > 100) ? h - 100 : h - 1));
			  	
			  	// Set callback function
			  	selectedRef_CURRENT = selectedRef_D;
			  	
		    });
			
			$("#iteractiveClearAllSelected_S").click(function() {
			    selectedRef_S[0].selectize.clear(true);
			    $("#diagnCount_S").html("0");
			});
			
			$("#iteractiveClearAllSelected_D").click(function() {
			    selectedRef_D[0].selectize.clear(true);
			    $("#diagnCount_D").html("0");
			});
			
			
			$("#alertDialog").dialog({
			      resizable: true,
		      	  autoOpen: false,
			      height: "auto",
			      width: "auto",
			      modal: true,
			      closeOnEscape: true,
			      buttons: {
			        "Ok": function() {
			          $(this).html("");
			          $(this).dialog("close");
			        }
			      }
			 });
			 
			 $("#selectionDialog").dialog({
			      resizable: false,
		      	  autoOpen: false,
			      height: "auto",
			      width: "auto",
			      modal: true,
			      buttons: {
			        "Confirm selection": function() {
			        	var itemsToAdd = selectedRef[0].selectize.getValue();
			    		var itemsAdded = selectedRef_CURRENT[0].selectize.getValue();
			        	
			        	if(itemsToAdd && itemsToAdd.length > 0) {
			        		var itemNotAddedCount = 0;
							for (var i = 0; i < itemsToAdd.length; i++){
					    		item = itemsToAdd[i];
					    		if(!itemsAdded.includes(item)) {
					    			selectedRef_CURRENT[0].selectize.addItem(item, false);
					    		}
					    		else {
					    			itemNotAddedCount = itemNotAddedCount + 1;
					    		}
					    	}
					    	selectedRef_CURRENT[0].selectize.refreshItems();
					    	
					    	if(itemNotAddedCount > 0) {
					    		$("#alertDialog").html(itemNotAddedCount + " diagnoses over " + itemsToAdd.length + " diagnoses selected were already added.");
				    			$("#alertDialog").dialog("open");
					    	}
					    }
					    else {
					    	$("#alertDialog").html("No diagnses have been selected");
				    		$("#alertDialog").dialog("open");
					    }
					    selectedRef_CURRENT = null;
					    
					    selectedRef[0].selectize.clear(true);
					    // selectRef[0].selectize.clear(true);
					    
					    $("#diagnCount").html("0");
					    
					    // Compute total pairs
					    var selectedRef_pairs_S = selectedRef_S[0].selectize.getValue();
					    var selectedRef_pairs_D = [];
					    
					    var currentValue = $("#selectedSelOption_D").val(); // allDiagnoses, allGroupDiagnoses
			 	 
					 	if(currentValue == "allDiagnoses") {
					 		for(var i = 0; i < diagnosisList.length; i++) {
					        	selectedRef_pairs_D.push(diagnosisList[i].code);
				        	}
					 	}
					 	else {
					 		selectedRef_pairs_D = selectedRef_D[0].selectize.getValue();;
					 	}
					    
					    var totPairsLocal = computePairs(selectedRef_pairs_S, selectedRef_pairs_D);
					    
					    var computeLengthTotPairsLocal = computeLength(totPairsLocal);
					    $("#totPairsPatter").html(Math.round(computeLengthTotPairsLocal / 2) + "");
					    
			          	$(this).dialog("close");
			        },
			        "Cancel": function() {
			          	selectedRef_CURRENT = null;
			          	
			          	selectedRef[0].selectize.clear(true);
					    // selectRef[0].selectize.clear(true);
					    
					    $("#diagnCount").html("0");
					    
			          	$(this).dialog("close");
			        }
			      }
			 });
			 
			 // Diagnoses selection logic
			 $("#codeRegexpCb").click(function() {
			    var inputVal = $("#codeRegexp").val();
			    if(inputVal != null && inputVal.length > 0) {
			    	var diagnosisCodesToAdd = [];
					try {		    
				    	var re = null; 
						if(inputVal.startsWith("i/")) {
							re = new RegExp(inputVal.substring(2), "i");
						}
						else {
							re = new RegExp(inputVal);
						}
						
				    	for (var i = 0; i < diagnosisList.length; i++){
				    		diagnosisElem = diagnosisList[i];
				    		var res = diagnosisElem.code.match(re);
				    		if(res != null && res.length > 0) {
				    			diagnosisCodesToAdd.push(diagnosisElem.code);
				    		}
				    	}
			    	} catch(err) {
			    		
			    	}
			    	
			    	if(diagnosisCodesToAdd.length > 250) {
			    		$("#alertDialog").html("ATTENTION: your regular expression matches <b>" + diagnosisCodesToAdd.length + "</b> diagnosis codes.<br/>" + 
			    		"Adding diagnoses by regular expressions is allowed up to a maximum of 250 code matches per regular expression.<br/>" + 
			    		"Please, try to reformulate your regular expression to meet this constraint.");
			    		$("#alertDialog").dialog("open");
			    	}
			    	else if(diagnosisCodesToAdd.length == 0) {
			    		$("#alertDialog").html("No matches for the regular expression: " + inputVal);
			    	    $("#alertDialog").dialog("open");
			    	}
			    	else {
			    		for(var k = 0; k < diagnosisCodesToAdd.length; k++) {
			    			selectedRef[0].selectize.addItem(diagnosisCodesToAdd[k], false);
			    		}
			    	}
			    	
			    }
			    else {
			    	$("#alertDialog").html("Empty string - specify a valid regular expression.");
			    	$("#alertDialog").dialog("open");
			    }
			    
			    $("#diagnCount").html(selectedRef[0].selectize.getValue().length);
			});
			
	   		$("#descrRegexpCb").click(function() {
			    var inputVal = $("#descrRegexp").val();
			    if(inputVal != null && inputVal.length > 0) {
			    	var diagnosisCodesToAdd = [];
					try {			    
				    	var re = null; 
						if(inputVal.startsWith("i/")) {
							re = new RegExp(inputVal.substring(2), "i");
						}
						else {
							re = new RegExp(inputVal);
						}
						
				    	for (var i = 0; i < diagnosisList.length; i++){
				    		diagnosisElem = diagnosisList[i];
				    		var res = diagnosisElem.description.match(re);
				    		if(res != null && res.length > 0) {
				    			diagnosisCodesToAdd.push(diagnosisElem.code);
				    		}
				    	}
			    	} catch(err) {
			    		
			    	}
			    	
			    	if(diagnosisCodesToAdd.length > 250) {
			    		$("#alertDialog").html("ATTENTION: your regular expression matches <b>" + diagnosisCodesToAdd.length + "</b> diagnosis codes.<br/>" + 
			    		"Adding diagnoses by regular expressions is allowed up to a maximum of 250 code matches per regular expression.<br/>" + 
			    		"Please, try to reformulate your regular expression to meet this constraint.");
			    		$("#alertDialog").dialog("open");
			    	}
			    	else if(diagnosisCodesToAdd.length == 0) {
			    		$("#alertDialog").html("No matches for the regular expression: " + inputVal);
			    	    $("#alertDialog").dialog("open");
			    	}
			    	else {
			    		for(var k = 0; k < diagnosisCodesToAdd.length; k++) {
			    			selectedRef[0].selectize.addItem(diagnosisCodesToAdd[k], false);
			    		}
			    	}
			    	
			    }
			    else {
			    	$("#alertDialog").html("Empty string - specify a valid regular expression.");
			    	$("#alertDialog").dialog("open");
			    }
			    
			    $("#diagnCount").html(selectedRef[0].selectize.getValue().length);
			});
			
			/*
			$("#interactiveCb").click(function() {
			    var itemsToAdd = selectRef[0].selectize.getValue();
			    var itemsAdded = selectedRef[0].selectize.getValue();
			    
			    if(itemsToAdd && itemsToAdd.length > 0) {
					for (var i = 0; i < itemsToAdd.length; i++){
			    		item = itemsToAdd[i];
			    		if(!itemsAdded.includes(item)) {
			    			selectedRef[0].selectize.addItem(item, false);
			    		}
			    	}
			    	selectedRef[0].selectize.refreshItems();
			    }
			    
			    $("#diagnCount").html(selectedRef[0].selectize.getValue().length);
			});
			*/
			
			/*
			$("#iteractiveClearSelection").click(function() {
			    selectRef[0].selectize.clear(true);
			});
			*/
	   		
	   		$("#iteractiveClearAllSelected").click(function() {
			    selectedRef[0].selectize.clear(true);
			    $("#diagnCount").html("0");
			});
	   		
	   		/*
	   		selectRef = $('#select-to').selectize({
				persist: false,
				openOnFocus: false,
				maxItems: null,
				maxOptions: 10,
				valueField: 'code',
				labelField: 'description',
				searchField: ['code', 'description'],
				sortField: [
					{field: 'description', direction: 'asc'},
					{field: 'code', direction: 'asc'}
				],
				options: diagnosisList,
				render: {
					item: function(item, escape) {
						return '<div>' +
							(item.description ? '<span class="description" style="font-weight: bold;">' + escape((item.description.length > 20) ? item.description.substring(0, 19) + "..." : item.description) + '</span>' : '') + '&nbsp;' +
							(item.code ? '<span class="code">(\'' + escape(item.code) + '\')</span>' : '') +
						'</div>';
					},
					option: function(item, escape) {
						return '<div>' +
							(item.description ? '<span class="description" style="font-weight: bold;">' + escape((item.description.length > 20) ? item.description.substring(0, 19) + "..." : item.description) + '</span>' : '') + '&nbsp;' +
							(item.code ? '<span class="code">(\'' + escape(item.code) + '\')</span>' : '') +
						'</div>';
					}
				}
			});
			*/
			
			selectedRef = $('#selected-to').selectize({
				persist: false,
				openOnFocus: false,
				maxItems: null,
				maxOptions: 10,
				valueField: 'code',
				labelField: 'description',
				searchField: ['code', 'description'],
				sortField: [
					{field: 'description', direction: 'asc'},
					{field: 'code', direction: 'asc'}
				],
				options: diagnosisList,
				onItemAdd: function(name) { 
					$("#diagnCount").html(selectedRef[0].selectize.getValue().length);
				},
				onItemRemove: function(name) { 
					$("#diagnCount").html(selectedRef[0].selectize.getValue().length);
				},
				render: {
					item: function(item, escape) {
						return '<div>' +
							(item.description ? '<span class="description" style="font-weight: bold;">' + escape((item.description.length > 20) ? item.description.substring(0, 19) + "..." : item.description) + '</span>' : '') + '&nbsp;' +
							(item.code ? '<span class="code">(\'' + escape(item.code) + '\')</span>' : '') +
						'</div>';
					},
					option: function(item, escape) {
						return '<div>' +
							(item.description ? '<span class="description" style="font-weight: bold;">' + escape((item.description.length > 20) ? item.description.substring(0, 19) + "..." : item.description) + '</span>' : '') + '&nbsp;' +
							(item.code ? '<span class="code">(\'' + escape(item.code) + '\')</span>' : '') +
						'</div>';
					}
				}
			});
			
			$("#confirmDialog").dialog({
			      resizable: true,
		      	  autoOpen: false,
			      height: "auto",
			      width: "auto",
			      modal: true,
			      buttons: {
			        "Proceed": function() {
			          $(this).html("");
			          window.location = "comorbidityParameters";
			          $(this).dialog("close");
			        },
			        "Cancel": function() {
			          $(this).html("");
			          $(this).dialog("close");
			        }
			      }
			 });
			 
			 $("#computingDialog").dialog({
			      resizable: true,
		      	  autoOpen: false,
			      height: "auto",
			      width: "auto",
			      modal: true,
			      buttons: {
			        "Cancel": function() {
			          $(this).html("");
			          $(this).dialog("close");
			        }
			      }
			 });
			 
			 
			$("#confirmDialogTooManuPairs").dialog({
			      resizable: true,
		      	  autoOpen: false,
			      height: "auto",
			      width: "auto",
			      modal: true,
			      buttons: {
			        "Proceed anyway with the analysis": function() {
			          $(this).html("");
			          var objectToSubmit = {};
				      objectToSubmit["diagnosisGroups"] = diagnosisGroups;
				      objectToSubmit["groupPairs"] = groupPairs;
				      
				 	  var form = $('<form method="post"><input type="submit" /><input type="hidden" name="jsonPair" /></form>').attr('action', 'comorbidityParameters');
				      $('input[name="jsonPair"]', form[0]).val(JSON.stringify(objectToSubmit));
				      document.body.appendChild(form[0]);
				      $('input[type="submit"]', form).click();
			          $(this).dialog("close");
			        },
			        "Review diagnosis pairign patterns (SUGGESTED)": function() {
			          $(this).html("");
			          $(this).dialog("close");
			        }
			      }
			 });
			
			
			$("#uploadPairs").click(function() {			 	
			 	
			 	if(totPairsGlobalCount != null && (totPairsGlobalCount == 0 || groupPairs == null || Object.keys(groupPairs).length == 0)) {
			 		var allPairsGlobalCountInt = 0;
			   		for (var i = 0; i < diagnosisList.length; i++)
		    			for (var j = i + 1; j < diagnosisList.length; j++)
		        			allPairsGlobalCountInt++;
			    	totPairsGlobalCount = allPairsGlobalCountInt * 2;
			    }
			    
			    if(totPairsGlobalCount != null && Math.round((totPairsGlobalCount + 1) / 2) > 300000) {
			    	$('#confirmDialogTooManuPairs').dialog('option', 'title', "You are going to analyze " + Math.round((totPairsGlobalCount) / 2) + " diagnosis pairs!");
			    
			    	$("#confirmDialogTooManuPairs").html("With such a number of pairs of diagnoses to evaluate (greater than 300000), the execution of comorbidity analysis will last several minutes and " +
			    		" need a considerable amount of RAM (more than 2Gb).<br/>" + 
			    		"Would you like to define a more restrivtive set of diagnosis pairs to analyze by editing the pairign patterns?");
				    $("#confirmDialogTooManuPairs").dialog("open");
				    return
			    }
			    
			    var objectToSubmit = {};
			    objectToSubmit["diagnosisGroups"] = diagnosisGroups;
			    objectToSubmit["groupPairs"] = groupPairs;
			    
			 	var form = $('<form method="post"><input type="submit" /><input type="hidden" name="jsonPair" /></form>').attr('action', 'comorbidityParameters');
			    $('input[name="jsonPair"]', form[0]).val(JSON.stringify(objectToSubmit));
			    document.body.appendChild(form[0]);
			    $('input[type="submit"]', form).click();
			 });
			 
			 $("#resetPairs").click(function() {			 	
			 	window.location = "diagnosisPairing";
			 });
			 
			 $("#fullPairListShow").click(function() {
			 	var listPairString = "";
			 	totPairsGlobalCount = computeLength(totPairsGlobal);
			 	if(totPairsGlobalCount == 0) {
		        	listPairString = "With current settings, all pairs of diagnoses will be considered for comorbidity analysis.";
		        }
		        else {
		        	listPairString = "With current settings, the following pairs of diagnoses will be considered for comorbidity analysis:<ul>";
		        	
		        	Object.keys(totPairsGlobal).forEach(function(group_S) {
					    // console.log(group_S, totPairsGlobal[group_S]);
					    listPairString += "<li>Diagnosis: " + group_S + " paired with " + totPairsGlobal[group_S].length + " diagnoses</li>";
					});
					
		        	listPairString += "</ul>";
		        }
			 			 				 	
			 	$("#alertDialog").html(listPairString);
				$("#alertDialog").dialog("open");
			 });
			 
			 $("#resetPairs").click(function() {			 	
			 	window.location = "diagnosisPairing";
			 });
			 
			 $("#selectedSelOption_D").change(function() {			 	
			 	 var currentValue = $("#selectedSelOption_D").val(); // allDiagnoses, allGroupDiagnoses
			 	 
			 	 if(currentValue == "allDiagnoses") {
			 	 	$("#selectedSel_container_D").hide();
			 	 }
			 	 else {
			 	 	$("#selectedSel_container_D").show();
			 	 }
			 });
			 
			 $("#selectedSel_container_D").hide();
			 
			 $("#diagnosisPairignSkipButton").click(function() {
			 	$("#uploadPairs").click();
		 	 });
		 	 
		 	 
		 	 $("#uploadPairs").hide();
			 
			 $("#regExpInfoExampleD").click(function() {
				openInfoDialog("INFO: Regular expressions examples", "regExpInfoExampleD_cont");
			 });
			 
			 $("#regExpInfoExampleD1").click(function() {
				openInfoDialog("INFO: Regular expressions examples", "regExpInfoExampleD_cont");
			 });
			 
			 infoDialogRef = $("#infoDialog").dialog({
			      resizable: true,
		      	  autoOpen: false,
			      height: "auto",
			      width: "auto",
			      modal: true,
			      closeOnEscape: true,
			      buttons: {
			        "Close": function() {
			          $(this).html("");
			          $(this).dialog("close");
			        }
			      }
			 });
			 
		});
		
		function escapeHtml(text) {
		  var map = {
		    '&': '&amp;',
		    '<': '&lt;',
		    '>': '&gt;',
		    '"': '&quot;',
		    "'": '&#039;'
		  };
		
		  return text.replace(/[&<>"']/g, function(m) { return map[m]; });
		}
		
		function computePairs(array1, array2) {
		  	
		  	var totPairsLocal = {};
		  	
		  	for(var i = 0; i < array1.length; i++) {
		    	var code_S = array1[i];
		    	for(var k = 0; k < array2.length; k++) {
		    		var code_D = array2[k];
		    		if(code_S != code_D) {
			    		if(!(code_S in totPairsLocal)) totPairsLocal[code_S] = new Set();
			    		totPairsLocal[code_S].add(code_D);
			    		if(!(code_D in totPairsLocal)) totPairsLocal[code_D] = new Set();
			    		totPairsLocal[code_D].add(code_S);
		    		}
		    	}
		    }
		    
		    return totPairsLocal;
		}
		
		function computeLength(objPairs) {
		  	var totalPairs = 0;
		  	
		  	// Add to totPairsGlobal 
		    Object.keys(objPairs).forEach(function(group_S) {
			    // console.log(group_S, objPairs[group_S]);
			    totalPairs += objPairs[group_S].size;
			});
		    
		    return totalPairs;
		}
		
		function updateUploadPairs() {
		  $("#uploadPairs").hide();
		  
		  if(totPairsGlobal != null && Object.keys(totPairsGlobal).length > 0) {
		  		$("#uploadPairs").show();
		  }
		}
		
		function openInfoDialog(title, HTMLcontentID) {
			$("#infoDialog").dialog('option', 'title', title);
			var clone = $("#" + HTMLcontentID).clone(true);
			infoDialogRef.html("");
			infoDialogRef.html(clone.html());
			$("#infoDialog").dialog("open");
		}
		
	  </script>
	  <!-- DIAGNOSIS PAIRING SELECTION - END -->
	  
	  <div class="info-c4j" style="font-size: 100%;">
	  Your dataset includes <span id="totalDiagnoses">-</span> diagnoses (generating a max of <span id="maxTotalDiagnosisPairs">-</span> diagnosis pairs to study).<br/>
	  <b>With current settings, you are going to analyze relevant comorbidities among <span id="totalDiagnosisPairs" style="color: red;">ALL</span> diagnosis pairs.</b>
	  <br/><div id="fullPairListShow" class="buttonDiv-c4j">Show current list of diagnosis pairs</div>
	  </div>
	  
	  <div id="alertDialog" title="">
	  </div>
	  
	  <div id="confirmDialog" title="">
	  </div>
	  
	  <div id="computingDialog" title="Wait while computing diagnosis pairs number...">
	  </div>
	  
	  <div id="confirmDialogTooManuPairs" title="">
	  </div>
	  
	  
	  <h3>Diagnosis pairing pattern(s) defined: <span id="diagPairsDefinedCount">0</span></h3>
	  
	  <div id="groupListTitleLower">
	  <button id="addPair" class="buttonStyle" style="background-color: #FFC97F;">Define a new diagnosis pairing pattern</button>&nbsp;
	  <button id="resetPairs" class="buttonStyle" style="background-color: #FFC97F;">Empty diagnosis pairing pattern(s) list</button>&nbsp;
	  <button id="uploadPairs" class="buttonStyle">Upload diagnosis pairing pattern(s) from the list below</button>&nbsp;
	  </div>
	  <div id="pairingList" style="background-color: #D3D7CF; padding: 5px; margin: 5px;">
	  	
	  </div>
	  
	</div>
</@um.pageContent>
	    

<@um.pageFooter/>
